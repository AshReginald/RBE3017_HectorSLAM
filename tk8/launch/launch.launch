
<launch>
  <!-- Arguments -->
  <arg name="model" default="tk8" doc="Name of the robot model"/>
  <arg name="urdf_file" default="$(find tk8)/urdf/tk8.urdf" doc="Path to the URDF file"/>
  <arg name="world_file" default="$(find turtlebot3_gazebo)/worlds/turtlebot3_world.world" />
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="verbose" default="false"/>
  <arg name="respawn_gazebo" default="false"/>
  <arg name="start_teleop" default="false"/>
  <arg name="rviz" default="true"/>

  <!-- Initial Pose -->
  <arg name="x_pos" default="0.5"/>
  <arg name="y_pos" default="0.5"/>
  <arg name="z_pos" default="0.1"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <!-- Load controller parameters -->
  <rosparam file="$(find tk8)/config/tk8_controllers.yaml" command="load"/>

  <!-- Load URDF -->
  <param name="robot_description" command="$(find xacro)/xacro $(arg urdf_file)" />
  <param name="/use_sim_time" value="$(arg use_sim_time)"/>

  <!-- Start Gazebo -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(arg world_file)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="verbose" value="$(arg verbose)"/>
    <arg name="respawn_gazebo" value="$(arg respawn_gazebo)"/>
  </include>

  <!-- Spawn robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -model $(arg model) -param robot_description
              -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos)
              -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>

  <!-- Controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" args="joint_state_controller servo_controller"/>

  <!-- Robot state publisher -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
    respawn="false" output="screen"/>

  <!-- Hector SLAM -->
  <node pkg="hector_mapping" type="hector_mapping" name="hector_mapping" output="screen">
    <!-- Frame names -->
    <param name="map_frame" value="map"/>
    <param name="base_frame" value="base_link"/>
    <param name="odom_frame" value="odom"/>

    <!-- Map parameters -->
    <param name="map_resolution" value="0.05"/>
    <param name="map_size" value="2048"/>
    <param name="map_start_x" value="0.5"/>
    <param name="map_start_y" value="0.5"/>
    <param name="map_multi_res_levels" value="1"/> 
    
    <!-- Scan matching parameters -->
    <param name="update_factor_free" value="0.4"/>
    <param name="update_factor_occupied" value="0.9"/>  <!-- Tăng độ tin cậy cho vật cản -->
    <param name="update_min_d" value="0.1"/>  <!-- Giảm khoảng cách update tối thiểu -->
    <param name="update_min_angle" value="0.04"/>  <!-- Giảm góc quay tối thiểu -->
    
    <!-- Laser parameters -->
    <param name="laser_min_dist" value="0.1"/>  <!-- Giảm khoảng cách tối thiểu -->
    <param name="laser_max_dist" value="12.0"/>
    <param name="laser_z_min_value" value="-0.5"/>
    <param name="laser_z_max_value" value="0.5"/>
    
    <!-- TF parameters -->
    <param name="pub_map_odom_transform" value="true"/>
    <param name="pub_map_scanmatch_transform" value="false"/>
    <param name="use_tf_scan_transformation" value="true"/>
    <param name="use_tf_pose_start_estimate" value="false"/>
    
    <!-- Scan topic -->
    <remap from="scan" to="/scan"/>
    
    <!-- Thêm các tham số sau -->
    <param name="pub_odometry" value="true"/>
    <param name="scan_matcher" value="normal"/>
    <param name="output_timing" value="false"/>
    <param name="map_pub_period" value="1.0"/>
    
  </node>
  
  <node pkg="hector_trajectory_server" type="hector_trajectory_server" name="hector_trajectory_server" output="screen">
  <param name="target_frame_name" type="string" value="map" />
  <param name="source_frame_name" type="string" value="base_link" />
  <param name="trajectory_update_rate" type="double" value="4" />
  </node>

  <node pkg="hector_geotiff" type="geotiff_node" name="hector_geotiff_node" output="screen">
  <param name="map_file_path" value="$(find tk8)/maps" />
  <param name="map_file_base_name" value="hector_slam_map" />
  <param name="draw_background_checkerboard" value="true" />
  <param name="draw_free_space_grid" value="true" />
  </node>
  
  <node pkg="map_server" type="map_saver" name="hector_map_saver" 
    args="-f $(find tk8)/maps/turtle" 
    output="screen"
    launch-prefix="bash -c ' sleep 30; $0 $@'"/>

  <!-- Static transform publisher -->
  <node pkg="tf" type="static_transform_publisher" name="base_to_laser_broadcaster" 
        args="0.00239 -0.01 0.04579 0 0 0 base_link laser 100"/>

  <node pkg="tf" type="static_transform_publisher" name="end_servo_to_camera" 
      args="0.0245 -0.1798 -0.05198 1.5708 0 0 end_servo_link camera_link 100"/>
  
  <!-- Teleop -->
  <node name="servo_teleop_keyboard" pkg="tk8" type="teleop_robot.py"
        output="screen" launch-prefix="xterm -e" if="$(arg start_teleop)"/>

  <!-- RViz -->
  <arg name="rviz_config_file" default="$(find tk8)/tk8_default.rviz"/>
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(arg rviz_config_file)" if="$(arg rviz)"/>
</launch>
